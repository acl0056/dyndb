{
    "project": {},
    "files": {
        "dyndb.js": {
            "name": "dyndb.js",
            "modules": {
                "dyndb": 1
            },
            "classes": {
                "DynDB": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "dyndb": {
            "name": "dyndb",
            "submodules": {},
            "classes": {
                "DynDB": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "dyndb.js",
            "line": 14,
            "description": "DynDB 0.1.0 - (c) 2012 Sergio Alcantara\nProvides the base DynDB constructor",
            "author": "Sergio Alcantara"
        }
    },
    "classes": {
        "DynDB": {
            "name": "DynDB",
            "shortname": "DynDB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dyndb",
            "namespace": "",
            "file": "dyndb.js",
            "line": 14,
            "description": "DynDB Constructor.\nIt accepts the AWS access keys and the AWS region. If no arguments are passed,\nit gets the keys and region from the following environment variables:\n\n1. `AWS_ACCESS_KEY_ID`\n2. `AWS_SECRET_ACCESS_KEY`\n3. `AWS_REGION`",
            "is_constructor": 1,
            "params": [
                {
                    "name": "accessKeyID",
                    "description": "Your AWS access key ID",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "secretAccessKey",
                    "description": "Your AWS secret access key",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "region",
                    "description": "The AWS region you would like to use",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'us-east-1'"
                },
                {
                    "name": "securityToken",
                    "description": "The security token",
                    "type": "String",
                    "optional": true
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "dyndb.js",
            "line": 31,
            "description": "DynamoDB's service name used in the HTTP headers and to create the signature that authenticates every request",
            "itemtype": "property",
            "name": "SERVICE_NAME",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 41,
            "description": "DynamoDB's API version used in the HTTP headers of every request",
            "itemtype": "property",
            "name": "API_VERSION",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 51,
            "description": "IP address of the EC2 metadata service.",
            "itemtype": "property",
            "name": "EC2_METADATA_HOST",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 61,
            "description": "Path to the `security-credentials` within the EC2 metadata service.",
            "itemtype": "property",
            "name": "SECURITY_CREDENTIALS_RESOURCE",
            "type": "String",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 73,
            "description": "AWS region.",
            "itemtype": "property",
            "name": "region",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 82,
            "description": "AWS Access Key ID.",
            "itemtype": "property",
            "name": "accessKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 91,
            "description": "AWS Secret Access Key.",
            "itemtype": "property",
            "name": "secretKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 100,
            "description": "AWS Security Token, used only when the credentials come from the EC2 metadata service.",
            "itemtype": "property",
            "name": "securityToken",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 109,
            "description": "Expiration date of the current credentials obtained from the EC2 metadata service.",
            "itemtype": "property",
            "name": "credentialsExpiration",
            "type": "Date",
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 118,
            "description": "Sets the access keys and region to use for every request. If no arguments are passed,\nit gets the keys and region from the following environment variables:\n\n1. `AWS_ACCESS_KEY_ID`\n2. `AWS_SECRET_ACCESS_KEY`\n3. `AWS_REGION`",
            "itemtype": "method",
            "name": "setup",
            "chainable": 1,
            "params": [
                {
                    "name": "accessKeyID",
                    "description": "Your AWS access key ID",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "secretAccessKey",
                    "description": "Your AWS secret access key",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "region",
                    "description": "The AWS region you would like to use",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'us-east-1'"
                },
                {
                    "name": "securityToken",
                    "description": "The security token",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 142,
            "description": "Uses [Crypto.Hmac](http://nodejs.org/api/crypto.html#crypto_class_hmac) to calculate the SHA256 HMAC for the given data",
            "itemtype": "method",
            "name": "hmac",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "The hmac key to be used",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data for which to calculate the HMAC",
                    "type": "String"
                },
                {
                    "name": "encoding",
                    "description": "The desired output encoding for the HMAC. Can be `'hex'`, `'binary'` or `'base64'`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'binary'"
                }
            ],
            "return": {
                "description": "The calculated HMAC value. The type of the return value depends on the given `encoding`",
                "type": "Object"
            },
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 158,
            "description": "Uses [Crypto.Hash](http://nodejs.org/api/crypto.html#crypto_class_hash) to calculate the SHA256 hash for the given data",
            "itemtype": "method",
            "name": "sha256Hash",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data from which to calculate the hash",
                    "type": "String"
                },
                {
                    "name": "dataEncoding",
                    "description": "The data's encoding. Can be `'utf8'`, `'ascii'` or `'binary'`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'binary'"
                },
                {
                    "name": "encoding",
                    "description": "The desired output encoding for the hash. Can be `'hex'`, `'binary'` or `'base64'`",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'hex'"
                }
            ],
            "return": {
                "description": "The calculated hash value. The type of the return value depends on the given `encoding`",
                "type": "Object"
            },
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 174,
            "description": "Signs a given request. Follows the [AWS signature v4](http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html)\nspecs to add the `Authorization` header in `httpOpts`",
            "itemtype": "method",
            "name": "signRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "httpOpts",
                    "description": "The http options object that will be used when calling the `https.request()` method",
                    "type": "Object"
                },
                {
                    "name": "body",
                    "description": "The `Buffer` instance of the request body",
                    "type": "Buffer"
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 212,
            "description": "Generates an ISO8601 basic date string (`YYYYMMDD'T'HHMMSS'Z'`) for the given date instance",
            "itemtype": "method",
            "name": "basicISODate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "date",
                    "description": "A date instance. If no date is given, a `new Date()` is used",
                    "type": "Date",
                    "optional": true
                }
            ],
            "return": {
                "description": "An ISO8601 basic date string",
                "type": "String"
            },
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 226,
            "description": "This is the method that send the actual HTTP requests, caches the response, and executes the callback after the response has been received.",
            "itemtype": "method",
            "name": "httpRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "The [HTTP options](http://nodejs.org/api/http.html#http_http_request_options_callback) to use when sending the request.",
                    "type": "Object"
                },
                {
                    "name": "body",
                    "description": "The request's body. Must be a [Buffer](http://nodejs.org/api/buffer.html) or a String.\nSet it to `null`, `undefined`, `false`, or `''` to send a request with no body (a `GET` request for instance).",
                    "type": "Buffer|String"
                },
                {
                    "name": "callback",
                    "description": "Callback function to call after the response has been received.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "useHttps",
                    "description": "Set this to true to use HTTPS.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 261,
            "description": "Underlying method that builds the request before sending it and relays the response to the callback.",
            "itemtype": "method",
            "name": "sendRequest",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "operationName",
                    "description": "Name of the DynamoDB operation to request.",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Body of the request.",
                    "type": "Object|String",
                    "optional": true,
                    "optdefault": "'{}'"
                },
                {
                    "name": "callback",
                    "description": "Callback function to call after receiving the response.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "context",
                    "description": "Context in which the callback should be executed.\nDefaults to the underlying HTTP response object.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "httpResponseObject"
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 306,
            "description": "Gets the EC2 IAM role name from the metadata service.",
            "itemtype": "method",
            "name": "getEC2IAMRole",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function that receives the role returned by the metadata service.",
                    "type": "Function"
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 319,
            "description": "Gets the security credentials from the metadata service.",
            "itemtype": "method",
            "name": "getEC2IAMSecurityCredentials",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "role",
                    "description": "IAM role name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function that receives the parsed credentials object returned by the metadata service.",
                    "type": "Function"
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 340,
            "description": "Helper function that returns `true` if getting the security credentials from the metadata service is needed or `false` otherwise.",
            "itemtype": "method",
            "name": "needsToLoadEC2IAMRoleCredentials",
            "access": "private",
            "tagname": "",
            "class": "DynDB",
            "module": "dyndb"
        },
        {
            "file": "dyndb.js",
            "line": 352,
            "description": "Sends a request to Amazon DynamoDB",
            "itemtype": "method",
            "name": "request",
            "chainable": 1,
            "params": [
                {
                    "name": "operationName",
                    "description": "Name of the DynamoDB operation to request. Consult\n[DynamoDB documentation](http://docs.amazonwebservices.com/amazondynamodb/latest/developerguide/operationlist.html 'DynamoDB Operations')\nfor a list of available operations",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Body of the request to send. If it's not a string, it is converted into a string using `JSON.stringify()`.\nConsult [DynamoDB documentation](http://docs.amazonwebservices.com/amazondynamodb/latest/developerguide/operationlist.html 'DynamoDB Operations')\nfor details about the body for each type of operation",
                    "type": "Object|String",
                    "optional": true,
                    "optdefault": "'{}'"
                },
                {
                    "name": "callback",
                    "description": "Callback function to execute after the response has been received or when an error was triggered during the request.\nThe callback function should take the following arguments:",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "This can be:\n\n1. The error object passed by the underlying http request if the 'error' event was triggered\n2. The response's status code, if it's not `200`\n3. Exception object thrown by `JSON.parse()`\n4. Undefined if there was no error",
                            "type": "Object"
                        },
                        {
                            "name": "json",
                            "description": "The parsed JSON response or a string if the response is not a valid JSON string",
                            "type": "Object|String"
                        }
                    ]
                },
                {
                    "name": "context",
                    "description": "The `context` in which the callback should be executed, meaning that whenever the callback function is called,\nthe value of `this`, inside the callback, will be `context`. If no `context` is given, the value of `this` would be the underlying request's\n[http.ClientResponse](http://nodejs.org/api/http.html#http_http_clientresponse) object, which contains data like `statusCode` and `headers`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DynDB",
            "module": "dyndb"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dyndb.js:142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " dyndb.js:158"
        }
    ]
}